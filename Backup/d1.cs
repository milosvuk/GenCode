//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WinTest {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class d1 : DataSet {
        
        private DepartmentDataTable tableDepartment;
        
        public d1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected d1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["Department"] != null)) {
                    this.Tables.Add(new DepartmentDataTable(ds.Tables["Department"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public DepartmentDataTable Department {
            get {
                return this.tableDepartment;
            }
        }
        
        public override DataSet Clone() {
            d1 cln = ((d1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["Department"] != null)) {
                this.Tables.Add(new DepartmentDataTable(ds.Tables["Department"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.tableDepartment = ((DepartmentDataTable)(this.Tables["Department"]));
            if ((this.tableDepartment != null)) {
                this.tableDepartment.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "d1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/d1.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-GB");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.tableDepartment = new DepartmentDataTable();
            this.Tables.Add(this.tableDepartment);
        }
        
        private bool ShouldSerializeDepartment() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void DepartmentRowChangeEventHandler(object sender, DepartmentRowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DepartmentDataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn columnidDepartment;
            
            private DataColumn columnchrDeptName;
            
            private DataColumn columntxtDeptDesc;
            
            private DataColumn columnchrDeptImage;
            
            internal DepartmentDataTable() : 
                    base("Department") {
                this.InitClass();
            }
            
            internal DepartmentDataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn idDepartmentColumn {
                get {
                    return this.columnidDepartment;
                }
            }
            
            internal DataColumn chrDeptNameColumn {
                get {
                    return this.columnchrDeptName;
                }
            }
            
            internal DataColumn txtDeptDescColumn {
                get {
                    return this.columntxtDeptDesc;
                }
            }
            
            internal DataColumn chrDeptImageColumn {
                get {
                    return this.columnchrDeptImage;
                }
            }
            
            public DepartmentRow this[int index] {
                get {
                    return ((DepartmentRow)(this.Rows[index]));
                }
            }
            
            public event DepartmentRowChangeEventHandler DepartmentRowChanged;
            
            public event DepartmentRowChangeEventHandler DepartmentRowChanging;
            
            public event DepartmentRowChangeEventHandler DepartmentRowDeleted;
            
            public event DepartmentRowChangeEventHandler DepartmentRowDeleting;
            
            public void AddDepartmentRow(DepartmentRow row) {
                this.Rows.Add(row);
            }
            
            public DepartmentRow AddDepartmentRow(string chrDeptName, string txtDeptDesc, string chrDeptImage) {
                DepartmentRow rowDepartmentRow = ((DepartmentRow)(this.NewRow()));
                rowDepartmentRow.ItemArray = new object[] {
                        null,
                        chrDeptName,
                        txtDeptDesc,
                        chrDeptImage};
                this.Rows.Add(rowDepartmentRow);
                return rowDepartmentRow;
            }
            
            public DepartmentRow FindByidDepartment(int idDepartment) {
                return ((DepartmentRow)(this.Rows.Find(new object[] {
                            idDepartment})));
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                DepartmentDataTable cln = ((DepartmentDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new DepartmentDataTable();
            }
            
            internal void InitVars() {
                this.columnidDepartment = this.Columns["idDepartment"];
                this.columnchrDeptName = this.Columns["chrDeptName"];
                this.columntxtDeptDesc = this.Columns["txtDeptDesc"];
                this.columnchrDeptImage = this.Columns["chrDeptImage"];
            }
            
            private void InitClass() {
                this.columnidDepartment = new DataColumn("idDepartment", typeof(int), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnidDepartment);
                this.columnchrDeptName = new DataColumn("chrDeptName", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnchrDeptName);
                this.columntxtDeptDesc = new DataColumn("txtDeptDesc", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columntxtDeptDesc);
                this.columnchrDeptImage = new DataColumn("chrDeptImage", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.columnchrDeptImage);
                this.Constraints.Add(new UniqueConstraint("Constraint1", new DataColumn[] {
                                this.columnidDepartment}, true));
                this.columnidDepartment.AutoIncrement = true;
                this.columnidDepartment.AllowDBNull = false;
                this.columnidDepartment.ReadOnly = true;
                this.columnidDepartment.Unique = true;
            }
            
            public DepartmentRow NewDepartmentRow() {
                return ((DepartmentRow)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new DepartmentRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(DepartmentRow);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DepartmentRowChanged != null)) {
                    this.DepartmentRowChanged(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DepartmentRowChanging != null)) {
                    this.DepartmentRowChanging(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DepartmentRowDeleted != null)) {
                    this.DepartmentRowDeleted(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DepartmentRowDeleting != null)) {
                    this.DepartmentRowDeleting(this, new DepartmentRowChangeEvent(((DepartmentRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveDepartmentRow(DepartmentRow row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DepartmentRow : DataRow {
            
            private DepartmentDataTable tableDepartment;
            
            internal DepartmentRow(DataRowBuilder rb) : 
                    base(rb) {
                this.tableDepartment = ((DepartmentDataTable)(this.Table));
            }
            
            public int idDepartment {
                get {
                    return ((int)(this[this.tableDepartment.idDepartmentColumn]));
                }
                set {
                    this[this.tableDepartment.idDepartmentColumn] = value;
                }
            }
            
            public string chrDeptName {
                get {
                    try {
                        return ((string)(this[this.tableDepartment.chrDeptNameColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.chrDeptNameColumn] = value;
                }
            }
            
            public string txtDeptDesc {
                get {
                    try {
                        return ((string)(this[this.tableDepartment.txtDeptDescColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.txtDeptDescColumn] = value;
                }
            }
            
            public string chrDeptImage {
                get {
                    try {
                        return ((string)(this[this.tableDepartment.chrDeptImageColumn]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("Cannot get value because it is DBNull.", e);
                    }
                }
                set {
                    this[this.tableDepartment.chrDeptImageColumn] = value;
                }
            }
            
            public bool IschrDeptNameNull() {
                return this.IsNull(this.tableDepartment.chrDeptNameColumn);
            }
            
            public void SetchrDeptNameNull() {
                this[this.tableDepartment.chrDeptNameColumn] = System.Convert.DBNull;
            }
            
            public bool IstxtDeptDescNull() {
                return this.IsNull(this.tableDepartment.txtDeptDescColumn);
            }
            
            public void SettxtDeptDescNull() {
                this[this.tableDepartment.txtDeptDescColumn] = System.Convert.DBNull;
            }
            
            public bool IschrDeptImageNull() {
                return this.IsNull(this.tableDepartment.chrDeptImageColumn);
            }
            
            public void SetchrDeptImageNull() {
                this[this.tableDepartment.chrDeptImageColumn] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class DepartmentRowChangeEvent : EventArgs {
            
            private DepartmentRow eventRow;
            
            private DataRowAction eventAction;
            
            public DepartmentRowChangeEvent(DepartmentRow row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public DepartmentRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
